import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  // Variável para controlar o tema
  ThemeMode _themeMode = ThemeMode.light;

  // Função para alternar o tema
  void _toggleTheme() {
    setState(() {
      _themeMode = _themeMode == ThemeMode.light ? ThemeMode.dark : ThemeMode.light;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Calculadora de IMC',
      theme: ThemeData.light(), // Tema claro
      darkTheme: ThemeData.dark(), // Tema escuro
      themeMode: _themeMode, // Definindo o modo de tema
      home: LoginScreen(toggleTheme: _toggleTheme),
    );
  }
}

class LoginScreen extends StatefulWidget {
  final Function toggleTheme;

  LoginScreen({required this.toggleTheme});

  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  String _username = "imcteste";
  String _password = "123";

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Login'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _usernameController,
              decoration: InputDecoration(labelText: 'Usuário'),
            ),
            TextField(
              controller: _passwordController,
              decoration: InputDecoration(labelText: 'Senha'),
              obscureText: true,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                if (_usernameController.text == _username &&
                    _passwordController.text == _password) {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => HomeScreen(toggleTheme: widget.toggleTheme)),
                  );
                } else {
                  showDialog(
                    context: context,
                    builder: (context) {
                      return AlertDialog(
                        content: Text('Credenciais inválidas'),
                      );
                    },
                  );
                }
              },
              child: Text('Entrar'),
            ),
            TextButton(
              onPressed: () {
                _showForgotPasswordDialog();
              },
              child: Text('Esqueceu sua senha?'),
            ),
          ],
        ),
      ),
    );
  }

  void _showForgotPasswordDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Esqueceu sua senha?'),
          content: Text('Entre em contato com o suporte para recuperar sua senha.'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('Fechar'),
            ),
          ],
        );
      },
    );
  }
}

class HomeScreen extends StatefulWidget {
  final Function toggleTheme;

  HomeScreen({required this.toggleTheme});

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final TextEditingController _heightController = TextEditingController();
  final TextEditingController _weightController = TextEditingController();
  double _bmi = 0;
  String _resultMessage = '';

  void _calculateBMI() {
    try {
      double height = double.parse(_heightController.text) / 100;
      double weight = double.parse(_weightController.text);

      setState(() {
        _bmi = weight / (height * height);
        _resultMessage = _getResultMessage(_bmi);
      });
    } catch (e) {
      setState(() {
        _resultMessage = 'Entrada inválida. Por favor, insira números válidos.';
      });
    }
  }

  String _getResultMessage(double bmi) {
    if (bmi < 18.5) {
      return 'Abaixo do peso';
    } else if (bmi >= 18.5 && bmi < 24.9) {
      return 'Peso normal';
    } else if (bmi >= 25 && bmi < 29.9) {
      return 'Sobrepeso';
    } else if (bmi >= 30 && bmi < 34.9) {
      return 'Obesidade Grau 1';
    } else if (bmi >= 35 && bmi < 39.9) {
      return 'Obesidade Grau 2';
    } else {
      return 'Obesidade Grau 3 (ou Mórbida)';
    }
  }

  Future<String> _getSuggestion(String resultMessage) async {
    await Future.delayed(Duration(seconds: 2)); // Simulando chamada de API

    if (resultMessage == 'Abaixo do peso') {
      return '''
          Recomenda-se uma dieta rica em calorias e proteínas, como por exemplo:
          - Inclua alimentos como abacate, oleaginosas (castanhas, nozes), e batata-doce.
          - Tente fazer exercícios de resistência, como musculação, para ganhar massa muscular.
          - Exemplo de refeição: Café da manhã com ovos, abacate e pão integral com manteiga de amendoim.
      ''';
    } else if (resultMessage == 'Peso normal') {
      return '''
          Para manter o peso atual, siga uma dieta equilibrada e pratique exercícios regularmente, como por exemplo:
          - Continue com uma alimentação rica em vegetais, frutas e proteínas magras.
          - Faça exercícios cardiovasculares, como caminhadas ou corridas leves, pelo menos 3 vezes por semana.
          - Exemplo de refeição: Almoço com frango grelhado, salada de folhas verdes e quinoa.
      ''';
    } else if (resultMessage == 'Sobrepeso') {
      return '''
          Considera-se útil reduzir calorias e aumentar a atividade física, como por exemplo:
          - Substitua alimentos processados por integrais e reduza a ingestão de açúcares e gorduras saturadas.
          - Faça atividades aeróbicas regulares, como natação ou bicicleta.
          - Exemplo de refeição: Jantar com peixe assado, batata-doce e legumes grelhados.
      ''';
    } else if (resultMessage == 'Obesidade Grau 1') {
      return '''
          Para Obesidade Grau 1, recomenda-se buscar orientação médica, além de seguir práticas como:
          - Reduzir a ingestão calórica e focar em alimentos ricos em nutrientes.
          - Aumentar a prática de exercícios físicos, como caminhada rápida ou natação.
          - Exemplo de refeição: Jantar com peito de frango grelhado, brócolis cozido no vapor e arroz integral.
      ''';
    } else if (resultMessage == 'Obesidade Grau 2') {
      return '''
          Na Obesidade Grau 2, é recomendável apoio profissional:
          - Focar em alimentos de baixa densidade calórica, como legumes e frutas, e aumentar o consumo de água.
          - Praticar exercícios com moderação e regularidade, focando em aeróbicos leves e musculação.
          - Exemplo de refeição: Sopa de legumes, salada com grão-de-bico e proteína magra.
      ''';
    } else {
      return '''
          Para Obesidade Grau 3 (Mórbida), é crucial o acompanhamento médico:
          - Siga uma dieta rigorosamente controlada com orientação nutricional especializada.
          - Aumente a intensidade dos exercícios sob supervisão, com foco em perda de peso e saúde cardiovascular.
          - Exemplo de refeição: Salada de folhas verdes com frango grelhado e molho leve de iogurte.
      ''';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Calculadora de IMC'),
        actions: [
          IconButton(
            icon: Icon(Icons.exit_to_app),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
        ],
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            DrawerHeader(
              decoration: BoxDecoration(
                color: Colors.blue,
              ),
              child: Text(
                'Menu',
                style: TextStyle(color: Colors.white, fontSize: 24),
              ),
            ),
            ListTile(
              leading: Icon(Icons.home),
              title: Text('Página Inicial'),
              onTap: () {
                Navigator.pop(context);
              },
            ),
            ListTile(
              leading: Icon(Icons.brightness_6),
              title: Text('Mudar Tema'),
              onTap: () {
                widget.toggleTheme(); // Alterna o tema ao clicar
                Navigator.pop(context); // Fecha o menu
              },
            ),
            ListTile(
              leading: Icon(Icons.exit_to_app),
              title: Text('Sair'),
              onTap: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _heightController,
              decoration: InputDecoration(labelText: 'Altura (cm)'),
              keyboardType: TextInputType.number,
            ),
            TextField(
              controller: _weightController,
              decoration: InputDecoration(labelText: 'Peso (kg)'),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _calculateBMI,
              child: Text('Calcular IMC'),
            ),
            SizedBox(height: 20),
            Text(
              'Seu IMC é: ${_bmi.toStringAsFixed(2)}',
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            Text(
              _resultMessage,
              style: TextStyle(fontSize: 18),
            ),
            SizedBox(height: 20),
            if (_resultMessage.isNotEmpty) ...[
              Text('Sugestões:'),
              FutureBuilder<String>(
                future: _getSuggestion(_resultMessage),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return CircularProgressIndicator();
                  } else if (snapshot.hasError) {
                    return Text('Erro ao obter sugestões');
                  } else {
                    return Text(snapshot.data ?? '');
                  }
                },
              ),
            ],
          ],
        ),
      ),
    );
  }
}
